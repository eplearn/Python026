"""
Задание 1. При старте приложения запускаются три потока. Первый поток заполняет
список случайными числами. Второй поток находит сумму элементов списка,
а третий поток среднеарифметическое значение в списке. Полученный список, сумма и
среднеарифметическое выводятся на экран.

Задание 2. Пользователь с клавиатуры вводит путь к файлу. После чего запускаются
три потока. Первый поток заполняет файл случайными числами. Второй поток находит
все простые числа, а третий поток факториал каждого числа в файле. Результаты поиска
каждый поток должен записать в новый файл.

Подсказка: можно воспользоваться высокоуровневой библиотекой concurrent.futures для
создания пула потоков.

Нюансы реализации разрешаются программистом.
"""

    # Notes:

    # for random data_length = 10000000:

    # task1_threading [] in main() => 8.936927318572998 сек
    # task1_threading global => 8.996493816375732 сек

    # task1_futures => 8.789475917816162 сек


    # task2

    # random_fill(path)
    # # print(find_numbers(path))
    # numbers = find_numbers(path)
    # primes = find_primes(numbers)
    # print(f'\nprimes: {primes}')
    # factorials = calc_factorials(numbers)
    # print(factorials)

    # task2 testing function find_primes():

    # listp = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
     103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]
    #
    # listw = [x for x in range(200)]
    #
    # print(f'primes {listp}')
    # print(find_primes(listp))
    # print(f'all {listw}')
    # print(find_primes(listw))